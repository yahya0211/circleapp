// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id String @id @default(uuid())
  username String @unique
  fullname String 
  email String @unique
  password String
  photo_profile String
  bio String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  threads Thread[]
  likes Like[]
  replies Reply[]
  follower Userfollowing[] @relation(name: "Follower")
  followwing Userfollowing[] @relation(name: "Following") 
}

model Userfollowing {
  id String @id @default(uuid())
  follower Users @relation(name: "Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String 
  following Users @relation(name: "Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  FollowedAt DateTime @default(now())
  isFollow Boolean? @default(false)
}

model Thread {
  id String @id @default(uuid())
  content String
  image String?
  created_at DateTime @default(now())
  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  like Like[]
  replies Reply[]
  isLiked Boolean @default(false)
}

model Reply{
  id String @id @default(uuid())
  content String
  image String?
  created_at DateTime @default(now())
  Thread Thread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String?
  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade )
  user_id String

}

model Like {
  id String @id @default(uuid())
  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String
}